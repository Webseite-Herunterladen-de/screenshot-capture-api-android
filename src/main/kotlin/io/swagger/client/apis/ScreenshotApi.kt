/**
 * Screenshot Capture API
 * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ErrorModel

import io.swagger.client.infrastructure.*

class ScreenshotApi(basePath: kotlin.String = "https://api.webseite-herunterladen.de/v1") : ApiClient(basePath) {

    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. 
     * @param hash The hash value is for authenticated requests. If you want to publish this URL, you should use the authenticated requests. 
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). 
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun captureScreenshotAuthenticated(token: kotlin.String, hash: kotlin.String, url: kotlin.String, fileType: kotlin.String? = null, ttl: kotlin.Long? = null, invalidate: kotlin.Boolean? = null, full: kotlin.Boolean? = null, lazyloadScroll: kotlin.Boolean? = null, delay: kotlin.Long? = null, width: kotlin.Long? = null, height: kotlin.Long? = null, quality: kotlin.Long? = null, scale: java.math.BigDecimal? = null, x: kotlin.Long? = null, y: kotlin.Long? = null, redirect: kotlin.Boolean? = null, language: kotlin.String? = null, randomUserAgent: kotlin.Boolean? = null, userAgent: kotlin.String? = null, headers: kotlin.String? = null, cookies: kotlin.String? = null, css: kotlin.String? = null, js: kotlin.String? = null, wait: kotlin.String? = null, element: kotlin.String? = null, timezone: kotlin.String? = null, device: kotlin.String? = null, latitude: java.math.BigDecimal? = null, longitude: java.math.BigDecimal? = null, accuracy: java.math.BigDecimal? = null, proxy: kotlin.String? = null, adblock: kotlin.Boolean? = null, hideCookieBanners: kotlin.Boolean? = null): kotlin.Array<kotlin.Byte> {
        val localVariableQuery: MultiValueMap = mapOf("url" to listOf("$url"), "fileType" to listOf("$fileType"), "ttl" to listOf("$ttl"), "invalidate" to listOf("$invalidate"), "full" to listOf("$full"), "lazyload_scroll" to listOf("$lazyloadScroll"), "delay" to listOf("$delay"), "width" to listOf("$width"), "height" to listOf("$height"), "quality" to listOf("$quality"), "scale" to listOf("$scale"), "x" to listOf("$x"), "y" to listOf("$y"), "redirect" to listOf("$redirect"), "language" to listOf("$language"), "random_user_agent" to listOf("$randomUserAgent"), "user_agent" to listOf("$userAgent"), "headers" to listOf("$headers"), "cookies" to listOf("$cookies"), "css" to listOf("$css"), "js" to listOf("$js"), "wait" to listOf("$wait"), "element" to listOf("$element"), "timezone" to listOf("$timezone"), "device" to listOf("$device"), "latitude" to listOf("$latitude"), "longitude" to listOf("$longitude"), "accuracy" to listOf("$accuracy"), "proxy" to listOf("$proxy"), "adblock" to listOf("$adblock"), "hide_cookie_banners" to listOf("$hideCookieBanners"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/capture/{token}/{hash}".replace("{" + "token" + "}", "$token").replace("{" + "hash" + "}", "$hash"), query = localVariableQuery
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Webseite-Herunterladen.de Screenshot Capture is a very simple but powerful screenshot API that anyone can easily use to create pixel-perfect website screenshots. It always uses a recent version of Chrome to ensure that all modern web features are fully supported and rendering is exactly as your customers would expect.
     * @param token A valid token is needed to make paid API calls. Tokens can be managed from your account. 
     * @param url The URL of the website you want to capture. Please include the protocol (http:// or https://). 
     * @param fileType The image file format of the captured screenshot. Either png, jpeg, webp or PDF with 72 dpi. (optional, default to png)
     * @param ttl Number of seconds the capture file is cached by our CDN. An API request that is loaded through the cache does not count as a paid request. You can set a number of seconds from 0 seconds up to 2592000 seconds. This is a maximum of 30 days. (optional)
     * @param invalidate Force the API to invalidate the cache and capture a new screenshot. This call costs you additional money, because a call of a cache hit is not charged. (optional)
     * @param full Set this parameter to true if you want to screenshot the whole web page in full size. (optional)
     * @param lazyloadScroll Set this parameter to true to scroll down through the entire page before taking a screenshot. This is useful for triggering animations or lazy load elements in full screen. (optional, default to false)
     * @param delay The delay in milliseconds to wait after the page loads before taking the screenshot. This is in milliseconds. One second is 1000 milliseconds. From 0 milliseconds to a maximum of 10,000 milliseconds. (optional)
     * @param width The width, in pixels, of the browser viewport to use. (optional, default to 1920)
     * @param height The height, in pixels, of the browser viewport to use. Ignored if you set full to true. (optional, default to 1080)
     * @param quality The quality of the image between 0 and 100. This works only for the jpeg format, for PNG images the parameter is applied only during compression. (optional, default to 90)
     * @param scale The scale factor of the device to use when taking the screenshot. For example, a scale factor of 2 produces a high-resolution screenshot suitable for viewing on Retina devices. The larger the scale factor, the larger the screenshot produced. (optional, default to 1.0)
     * @param x The starting point of a section screenshot on the X axis. (optional, default to 0)
     * @param y The starting point of a section screenshot on the Y axis. (optional, default to 0)
     * @param redirect If you set Redirect, the response will be a 302 redirect to the screenshot file in our CDN. (optional, default to false)
     * @param language Sets the Accept-Language header on requests to the target URL so that you can take screenshots from a website with a specific language. (optional)
     * @param randomUserAgent Sets a random user agent header to emulate a different devices when taking screenshots. (optional, default to false)
     * @param userAgent Sets the user agent header to emulate a specific device when taking screenshots. (optional)
     * @param headers A semicolon-separated list of header parameters to be used when capturing the screenshot. Each header should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param cookies A semicolon-separated list of cookies to be used when capturing the screenshot. Each cookies should be passed as a key-value pair and multiple pairs should be separated by a semicolon. (optional)
     * @param css Inject your custom CSS. (optional)
     * @param js Inject your custom Javascript. (optional)
     * @param wait Wait until the specified CSS selector matches an element present in the page before taking a screenshot. The process is canceled after 60 seconds. (optional)
     * @param element Takes a screenshot of the first element matched by the specified CSS selector. This is ignored if full is true. (This option cannot be used with the PDF export format.) (optional)
     * @param timezone The IANA time zone identifier used for this capture. (optional, default to Europe/Berlin)
     * @param device The device used in the emulation. (optional)
     * @param latitude The latitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param longitude The longitude used in the emulation of the geo-location. (optional, default to 0.0)
     * @param accuracy The accuracy in meters used in the emulation of the geo-location. (optional, default to 2.0)
     * @param proxy Use an address of a proxy server through which the screenshot should be taken. The proxy address should be formatted as http://username:password@proxyserver.com:31280 (optional)
     * @param adblock Prevent ads from being displayed. Block requests from popular ad networks and hide frequent ads. (optional, default to false)
     * @param hideCookieBanners Prevent cookie banners and pop-ups from being displayed. The best possible result is tried. (optional, default to false)
     * @return kotlin.Array<kotlin.Byte>
     */
    @Suppress("UNCHECKED_CAST")
    fun captureScreenshotUnauthenticated(token: kotlin.String, url: kotlin.String, fileType: kotlin.String? = null, ttl: kotlin.Long? = null, invalidate: kotlin.Boolean? = null, full: kotlin.Boolean? = null, lazyloadScroll: kotlin.Boolean? = null, delay: kotlin.Long? = null, width: kotlin.Long? = null, height: kotlin.Long? = null, quality: kotlin.Long? = null, scale: java.math.BigDecimal? = null, x: kotlin.Long? = null, y: kotlin.Long? = null, redirect: kotlin.Boolean? = null, language: kotlin.String? = null, randomUserAgent: kotlin.Boolean? = null, userAgent: kotlin.String? = null, headers: kotlin.String? = null, cookies: kotlin.String? = null, css: kotlin.String? = null, js: kotlin.String? = null, wait: kotlin.String? = null, element: kotlin.String? = null, timezone: kotlin.String? = null, device: kotlin.String? = null, latitude: java.math.BigDecimal? = null, longitude: java.math.BigDecimal? = null, accuracy: java.math.BigDecimal? = null, proxy: kotlin.String? = null, adblock: kotlin.Boolean? = null, hideCookieBanners: kotlin.Boolean? = null): kotlin.Array<kotlin.Byte> {
        val localVariableQuery: MultiValueMap = mapOf("url" to listOf("$url"), "fileType" to listOf("$fileType"), "ttl" to listOf("$ttl"), "invalidate" to listOf("$invalidate"), "full" to listOf("$full"), "lazyload_scroll" to listOf("$lazyloadScroll"), "delay" to listOf("$delay"), "width" to listOf("$width"), "height" to listOf("$height"), "quality" to listOf("$quality"), "scale" to listOf("$scale"), "x" to listOf("$x"), "y" to listOf("$y"), "redirect" to listOf("$redirect"), "language" to listOf("$language"), "random_user_agent" to listOf("$randomUserAgent"), "user_agent" to listOf("$userAgent"), "headers" to listOf("$headers"), "cookies" to listOf("$cookies"), "css" to listOf("$css"), "js" to listOf("$js"), "wait" to listOf("$wait"), "element" to listOf("$element"), "timezone" to listOf("$timezone"), "device" to listOf("$device"), "latitude" to listOf("$latitude"), "longitude" to listOf("$longitude"), "accuracy" to listOf("$accuracy"), "proxy" to listOf("$proxy"), "adblock" to listOf("$adblock"), "hide_cookie_banners" to listOf("$hideCookieBanners"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/capture/{token}".replace("{" + "token" + "}", "$token"), query = localVariableQuery
        )
        val response = request<kotlin.Array<kotlin.Byte>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.Byte>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
